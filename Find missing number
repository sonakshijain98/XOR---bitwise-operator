//XOR-Approach
//XOR has certain properties 
//Assume a1 ^ a2 ^ a3 ^ …^ an = a and a1 ^ a2 ^ a3 ^ …^ an-1 = b
//Then a ^ b = a-b
#include <iostream>
using namespace std;
int find(int arr[], int n){
    int X1=arr[0];
    int X2=1;
    for(int i=1;i<n;i++){
        X1^=arr[i];
    }
    for(int i=2;i<=n+1;i++){
        X2^=i;
    }
    return X1^X2;
}
int main()
{
     int arr[] = {1, 2, 4, 6, 3, 7, 8};
    int n = sizeof(arr) / sizeof(arr[0]);
    cout << "The missing element is  "<< find(arr, n);
    return 0;
}



//Iterative Approach
#include <iostream>
using namespace std;
int find(int arr[], int n){
    int sum=((n+1)*(n+2))/2;
    for(int i=0;i<n;i++){
       sum-=arr[i]; 
    }
    return sum;
}
int main()
{
     int arr[] = {1, 2, 4, 6, 3, 7, 8};
    int n = sizeof(arr) / sizeof(arr[0]);
    cout << "The missing element is  "<< find(arr, n);
    return 0;
}



//Iterative Approach- only for Sorted array
#include <iostream>
using namespace std;
int find(int arr[], int n){
    int sum=-1;
    for(int i=0;i<n;i++){
        static int j=1;
        if(arr[i]!=j){
          sum=j;
          break;
        }
        j++;
    }
    return sum;
}
int main()
{
     int arr[] = { 1, 2, 3, 4, 6, 7 };
    int n = sizeof(arr) / sizeof(arr[0]);
    cout << "The missing element is  "<< find(arr, n);
    return 0;
}
